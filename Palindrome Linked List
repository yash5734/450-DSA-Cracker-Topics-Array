// method 1 using an vector

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        vector<int> arr;
        ListNode* curr = head;
        while(curr!=NULL){

            arr.push_back(curr->val);

            curr = curr->next;
        }
        
        int n = arr.size();
        for(int i =0;i<n;i++){
            if(arr[i]!=arr[n-1-i]){
                return false;
            }
        }
        return true;

    }
};

// Method 2

class Solution {
public:

    ListNode* getMid(ListNode* head){
        ListNode* slow = head;
        ListNode* fast  = head->next;

        while(fast!=NULL&&fast->next!=NULL){
            fast = fast->next->next;
            slow = slow->next;
        }
        return slow;
    }

    ListNode* reverse(ListNode* head){
        ListNode* curr = head;
        ListNode* prev = NULL;
        ListNode* next = NULL;

        while(curr!=NULL){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;

        }
        return prev;

    }
    bool isPalindrome(ListNode* head) {
        
        ListNode* middle = getMid(head);
        ListNode* temp = middle->next;
        middle->next = reverse(temp);
        ListNode* head2 = middle->next;
        ListNode* head1 = head;

        while(head2!=NULL){
            if(head1->val!=head2->val){
                return false;
            }
            head1 = head1->next;
            head2 = head2->next;
        }
        return true;
    }
};
