class Solution {

int binarysearch(vector<int> a,int s,int e,int target){
    int start = s;
    int end =e;
    int mid = start+(end-start)/2;

    while(start<=end){
        if(a[mid]==target) return mid;
        if(target>a[mid]){
            start = mid+1;
        }else end = mid-1;

        mid = start+(end-start)/2;

    }
    return -1;


}

int pivot(vector<int>&a){
    int start = 0;
    int end = a.size()-1;
    int mid = start+(end-start)/2;

    while(start<end){

        if(a[mid]>=a[0]){
            start = mid+1;
        }else
            end = mid;
        mid = start+(end-start)/2;
    }
    return start;

}


public:
    int search(vector<int>& nums, int target) {
        
        int piv = pivot(nums);

        if(target>=nums[piv] && target<=nums[nums.size()-1])
        return binarysearch(nums,piv,nums.size()-1,target);
        else
        return binarysearch(nums,0,piv-1,target);

    }
};
