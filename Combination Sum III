class Solution {
public:

    void findCombination(int ind, int target, vector<int> &arr, vector<vector<int>> &ans, vector<int>&ds,int k) {
        if(target==0) {
            if(ds.size()==k)
            ans.push_back(ds);
            return;
        }       
        if(target<0)
            return; 
        for(int i = ind;i<arr.size();i++) {
            if(i>ind && arr[i]==arr[i-1]) continue; 
            if(arr[i]>target) break; 
            ds.push_back(arr[i]);
            findCombination(i+1, target - arr[i], arr, ans, ds,k); 
            ds.pop_back();
        }
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target,int k) {

        sort(candidates.begin(), candidates.end());
        vector<vector<int>> ans; 
        vector<int> ds; 
        findCombination(0, target, candidates, ans, ds,k); 
        return ans;
    }

    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int> candidates = {1,2,3,4,5,6,7,8,9};
        vector<vector<int>> ans = combinationSum2(candidates,n,k);
        return ans;
    }
};
